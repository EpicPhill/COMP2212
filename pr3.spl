let r = read in
let Langs = langsfrom r in
if (length Langs) > 2 then
    let rL1 = Langs get 0 in
    let rL2 = Langs get 1 in
    let rL3 = Langs get 2 in
    let union(ll) =
        let L1 = ll get 0 in
        let L2 = ll get 1 in
        if (length L1) < 1 then L2 else
            let h = (head L1) in
            let t = (tail L1) in
            if (L2 contains h) then union(t::L2) else union(t::(h::L2)) in
    let nL1 = (union(rL1::rL2) trimto (limitfrom r)) in
    let nL2 = (union(rL1::rL3) trimto (limitfrom r)) in
    (unique nL1)::(unique nL2)
else
    {}

// alternate solution with built in functions
let r = read in
let LangList = (langsfrom r) in
let Limit = (limitfrom r) in
let L1 = (LangList get 0) in
let L2 = (LangList get 1) in
let L3 = (LangList get 2) in
let nL1 = (L1 U L2) trimto Limit in
let nL2 = (L1 U L3) trimto Limit in
nL1 :: nL2
//