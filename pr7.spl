let r = read in
let Langs = langsfrom r in
let Limit = limitfrom r in
if (length Langs) > 2 then
    let rL1 = Langs get 0 in
    let rL2 = Langs get 1 in
    let rL3 = Langs get 2 in
    let union(ll) =
        let L1 = ll get 0 in
        let L2 = ll get 1 in
        if (length L1) < 1 then L2 else
            let h = (head L1) in
            let t = (tail L1) in
            if (L2 contains h) then union(t::L2) else union(t::(h::L2)) in
    let nL1 = (union(rL1::rL2) trimto (limitfrom r)) in
    let nL2 = (union(rL1::rL3) trimto (limitfrom r)) in

    let postfix(ll) =
        let L = ll get 0 in
        let nL = ll get 1 in
        if (length L) < 1 then nL else
            let h = (head L) in
            let t = (tail L) in
            let nh = h ^ postchar in
            postfix(t::(nL::nh)) in
    let postchar = 'a' in
    let pL1 = unique (postfix(nL1::{}) trimto Limit) in
    let postchar = 'b' in
    let pL2 = unique (postfix(nL2::{}) trimto Limit) in
    pL1 :: pL2
else
    {}